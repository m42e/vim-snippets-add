priority 10
global !p
import os
strip_patterns=['inc', 'include', 'src', 'source']
def getPathInProject(path = '.'):
	origpath = os.path.dirname(path)
	path = get_project_root(path)
	return origpath.replace(path.replace('\\', '/')+'/', '');

def get_project_root(inpath='.'):
	path = os.path.abspath(inpath)
	while not os.path.exists(os.path.join(path, '.git')) and path != '/' and path != '\\':
		path = os.path.abspath(os.path.join(path, os.pardir))
	return path

def get_project_name(inpath='.'):
	path = get_project_root(inpath)
	projectnamefile = os.path.join(path, '.projectname')
	if os.path.isfile(projectnamefile):
		pname = open(projectnamefile, 'r').read().strip()
	else:
		pname = os.path.basename(path)
	return pname

def get_project_namespace(inpath='.'):
	path = get_project_root(inpath)
	projectnamefile = os.path.join(path, '.projectnamespace')
	if os.path.isfile(projectnamefile):
		pns = open(projectnamefile, 'r').read().strip().split('::')
	else:
		pns = [get_project_name()]
	return pns

def get_namespace(basenamespace=None, ppath=None, filename=None):
	if basenamespace is None:
		basenamespace = get_project_namespace()
	if ppath is None:
		ppath = getPathInProject(path)
	if filename is None:
		filename = snip.basename
	parts = ppath.split('/')
	for p in parts:
		if p in strip_patterns:
			parts.remove(p)
	parts = basenamespace + parts
	return parts

def gen_namespaces_start(nslist):
	def fmt_ns(name):
		return 'namespace ' + name + ' {'
	return '\n'.join(map(fmt_ns, nslist))

def gen_namespaces_end(nslist):
	def fmt_ns(name):
		return '} // namespace ' + name
	return '\n'.join(map(fmt_ns, nslist))

def make_guard(projectname, path, filename):
	parts = path.split('/')
	for p in parts:
		if p in strip_patterns:
			parts.remove(p)
	parts.insert(0, projectname)
	parts.append(filename)
	parts.append('h_')
	return '_'.join(parts).upper()
endglobal

snippet header "Headerfile Protection"
#ifndef ${1:`!p snip.rv = make_guard(get_project_name(), getPathInProject(path), snip.basename)`}
#define $1
${VISUAL}$0
#endif // $1
endsnippet

snippet fh "Headerfile Template"
/**
 *  \file          `!p snip.rv = os.path.basename(path)`
 *
 *  \copyright     BMW AG `!v strftime("%Y")`
 *
 *  \project       `!p snip.rv = get_project_name()`
 *
 *  \brief         API header file for MUNIIC StateManager
 */
#ifndef ${1:`!p snip.rv = make_guard(get_project_name(), getPathInProject(path), snip.basename)`}
#define $1
`!p snip.rv = gen_namespaces_start(get_namespace())`
${VISUAL}$0
`!p snip.rv = gen_namespaces_end(get_namespace())`
#endif // $1
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}${0}
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet ns11 "namespace x { namespace y .."
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}${0}
}${1/.+/ \/\/ namespace /m}$1
endsnippet

post_jump "if snip.tabstop == 0: del snip.buffer[snip.snippet_start[0]]"
snippet nss "namespace .. (namespace)"
// namespaces ${1:a::b}
`!p
snip.rv = gen_namespaces_start(t[1].split('::'))
`
${VISUAL}${0}
`!p
snip.rv = gen_namespaces_end(t[1].split('::'))
`
endsnippet

snippet cr "copyright"
// Copyright `!v strftime("%Y")` `!v g:snip_author`
$0
endsnippet

# Easily add a for loop that goes through a vector
snippet forv "forv"
for (${1:std::vector<int>::iterator} a = ${2:myvector}.begin(), b = $2.end(); a != b; a++) {
    ${3:/* use a here */}
}
endsnippet

snippet gfixture "gfixture"
class ${1:`!p snip.rv=snip.basename`} : public ::testing::Test
{
	public:
		$1(${2}) {
		}
		~$1() {
		}
};
${3}
endsnippet

snippet gtestheader "gtest Header"
#include "gtest/gtest.h"
#include "${1:`!p snip.rv = snip.basename.replace("_test", ".h")`}"
// Copyright `!v strftime("%Y")` `!v g:snip_author`
$0
endsnippet

snippet gtest "gtest"
TEST(${1:`!p snip.rv = snip.basename.replace("_test", "")`}, ${2:test_name}) {
	${3:/* Test code */}
}
endsnippet

snippet gtestf "gtestf"
TEST_F(${1:`!p snip.rv=fn.replace("\..*$", "")`}, ${2:test_name}) {
	${3:/* Test code */}
}
endsnippet

snippet cl "Our personal snipper for classes #1"
class ${1:`!p snip.rv=snip.basename`} 
{
	public:
		$1(${2:arguments});
		virtual ~$1();
	private:
		${4:/* data */}
};
endsnippet
snippet gfixture "gfixture"
class ${1:`!v Filename('$1_t', 'name')`} : public ::testing::Test
{
	public:
		$1(${2}) {
		}
		~$1() {
		}
};
${3}
endsnippet

snippet gtest "gtest"
TEST(${1:module_name}, ${2:test_name}) {
	${3:/* Test code */}
}
endsnippet
