priority 10
global !p
import os
def getPathInProject(path):
	path = os.path.abspath(path)
	origpath = os.path.dirname(path)
	while not os.path.exists(os.path.join(path, '.git')) and path != '/' and path != '\\':
		path = os.path.abspath(os.path.join(path, os.pardir))
	return origpath.replace(path.replace('\\', '/')+'/', '');
endglobal

snippet header "Headerfile Protection"
#ifndef ${1:`!p snip.rv = (getPathInProject(path).replace('/','_') + '_' + snip.basename + '_h_').upper()`}
#define $1
${VISUAL}$0
#endif // $1
endsnippet

snippet fh "Headerfile Template"
#ifndef ${1:`!p snip.rv = (getPathInProject(path).replace('/','_') + '_' + snip.basename + '_h_').upper()`}
#define $1
// Copyright `!v strftime("%Y")` `!v g:snip_author`
namespace${2/.+/ /m}${2:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}${0}
}${2/.+/ \/\/ namespace /m}$2
#endif // $1
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}${0}
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet cr "copyright"
// Copyright `!v strftime("%Y")` `!v g:snip_author`
$0
endsnippet

# Easily add a for loop that goes through a vector
snippet forv "forv"
for (${1:std::vector<int>::iterator} a = ${2:myvector}.begin(), b = $2.end(); a != b; a++) {
    ${3:/* use a here */}
}
endsnippet

snippet gfixture "gfixture"
class ${1:`!p snip.rv=snip.basename`} : public ::testing::Test
{
	public:
		$1(${2}) {
		}
		~$1() {
		}
};
${3}
endsnippet

snippet gtestheader "gtest Header"
#include "gtest/gtest.h"
#include "${1:`!p snip.rv = snip.basename.replace("_test", ".h")`}"
// Copyright `!v strftime("%Y")` `!v g:snip_author`
$0
endsnippet

snippet gtest "gtest"
TEST(${1:`!p snip.rv = snip.basename.replace("_test", "")`}, ${2:test_name}) {
	${3:/* Test code */}
}
endsnippet

snippet gtestf "gtestf"
TEST_F(${1:`!p snip.rv=fn.replace("\..*$", "")`}, ${2:test_name}) {
	${3:/* Test code */}
}
endsnippet

snippet cl "Our personal snipper for classes #1"
class ${1:`!p snip.rv=snip.basename`} 
{
    public:
        $1(${2:arguments});
			virtual ~$1();
    private:
		${4:/* data */}
};
endsnippet
